# Not sure if changing the name will break any volumes, so I'm leaving it as is.
name:  paperless

services:
  broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    platform: linux/arm64 # Because the autodetection does not work for Raspberry Pi 4B
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    depends_on:
      - broker
      - gotenberg
      - tika
      - ts-paperless
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - ./consume:/usr/src/paperless/consume
    env_file: paperless.env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
    network_mode: service:ts-paperless

  # - Apache Tika and Gotenberg servers are started with paperless and paperless
  #   is configured to use these services. These provide support for consuming
  #   Office documents (Word, Excel, Power Point and their LibreOffice counter-
  #   parts.
  gotenberg:
    image: docker.io/gotenberg/gotenberg:8.7
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  tika:
    image: docker.io/apache/tika:latest
    restart: unless-stopped
    environment:
      - TIKA_OPTS=-Xmx512m -Xms512m
    mem_limit: 512m

  dashy:
    # To build from source, replace 'image: lissy93/dashy' with 'build: .'
    # build: .
    image: lissy93/dashy
    container_name: dashy
    # Pass in your config file below, by specifying the path on your host machine
    volumes:
      - dashy-app:/app/
    depends_on:
      - ts-dashy
    # Set any environmental variables
    environment:
      NODE_ENV: production
      # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`
      UID: 0
      GID: 0
    # Specify restart policy
    restart: unless-stopped
    # Connect to the Tailscale network
    network_mode: service:ts-dashy
    # Configure healthchecks
    healthcheck:
      test: [ 'CMD', 'node', '/app/services/healthcheck' ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  glances:
    image: nicolargo/glances:latest
    container_name: glances
    platform: linux/arm64
    restart: unless-stopped
    privileged: true
    network_mode: service:ts-glances
    depends_on:
      - ts-glances
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - GLANCES_OPT=-w
      - PUID=0
      - PGID=0
      - TZ=Europe/Amsterdam

  # We are adding syncthing in here so that we can mount any volumes declared in this docker-compose
  syncthing:
    image: syncthing/syncthing:latest
    container_name: syncthing
    restart: unless-stopped
    #    ports:
    #      - "8484:8384"   # Exposes the Syncthing web UI on port 8484, off by default unless you need it for troubleshooting
    volumes:
      - media:/media   # Mounts the paperless media volume
      - ./syncthing/config.xml:/var/syncthing/config/config.xml  # Persist Syncthing's settings
    environment:
      - PUID=0  # Use your desired user ID for the container
      - PGID=0  # Use your desired group ID for the container
    # Add a secret API key to secure the Syncthing web UI

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    user: 116:125
    network_mode: service:ts-jellyfin
    depends_on:
      - ts-jellyfin
    volumes:
      - jellyfin-config:/config
      - jellyfin-cache:/cache
      - /media/external/windows/Music:/media/music
      - /media/external/windows/Books:/media/books
      - /media/external/windows/Radio:/media/radio
      - /media/external/windows/Video:/media/video
    restart: 'unless-stopped'

  # Tailscales
  ts-paperless:
    image: tailscale/tailscale:latest
    container_name: ts-paperless
    hostname: paperless
    environment:
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_AUTHKEY=${TS_AUTHKEY:?error}
      - TS_EXTRA_ARGS=--reset
      - TS_SERVE_CONFIG=/config/paperless.json
      - TS_USERSPACE=false
    volumes:
      - ./tailscale/paperless.json:/config/paperless.json
      - ts-paperless:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    restart: unless-stopped

  ts-dashy:
    image: tailscale/tailscale:latest
    container_name: ts-dashy
    hostname: dashy
    environment:
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_AUTHKEY=${TS_AUTHKEY:?error}
      - TS_EXTRA_ARGS=--reset
      - TS_SERVE_CONFIG=/config/dashy.json
      - TS_USERSPACE=false
    volumes:
      - ./tailscale/dashy.json:/config/dashy.json
      - ts-dashy:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    restart: unless-stopped

  ts-jellyfin:
    image: tailscale/tailscale:latest
    container_name: ts-jellyfin
    hostname: jellyfin
    environment:
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_AUTHKEY=${TS_AUTHKEY:?error}
      - TS_EXTRA_ARGS=--reset
      - TS_SERVE_CONFIG=/config/jellyfin.json
      - TS_USERSPACE=false
    volumes:
      - ./tailscale/jellyfin.json:/config/jellyfin.json
      - ts-jellyfin:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    restart: unless-stopped

  ts-glances:
    image: tailscale/tailscale:latest
    container_name: ts-glances
    hostname: glances
    environment:
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_AUTHKEY=${TS_AUTHKEY:?error}
      - TS_EXTRA_ARGS=--reset
      - TS_SERVE_CONFIG=/config/glances.json
      - TS_USERSPACE=false
    volumes:
      - ./tailscale/glances.json:/config/glances.json
      - ts-glances:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    restart: unless-stopped

volumes:
  # SQLite is used as the paperless database. The SQLite file is stored in the data volume.
  data:
  media:
  redisdata:
  dashy-app:
  ts-paperless:
  ts-dashy:
  ts-jellyfin:
  ts-glances:
  jellyfin-config:
  jellyfin-cache:
